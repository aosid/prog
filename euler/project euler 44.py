# -*- coding: utf-8 -*-
"""
Created on Thu Dec 20 15:31:31 2018

@author: vcian
"""

"""Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?"""

#file = open("C:\\Users\\vcian\\.spyder-py3\\penta.txt")
#plist = file.readlines()
#file.close()

#plist = [int(p.strip("\n").strip("'")) for p in plist]

interesting = set()
#interesting_ = set()
#while True:
#    for p in plist:
#        for q in plist[:plist.index(p)+1]:
#            if ((p+q) in plist):
#                interesting_.add((p,q,p+q))
#    new_p = plist[-1] + 3*(len(plist)) + 1
#    plist.append(new_p)
#    if len(plist) > 700:
#        break
#    if len(plist) % 10 == 0:
#        print(len(plist))
#    
#for tup in interesting:
#    if (tup[0]-tup[1]) in plist:
#        print(tup)
#        print(tup[0]-tup[1])
#
#while True:
#    for p in plist:
#        for q in plist[:plist.index(p)+1]:
#            if ((p-q) in plist):
#                interesting.add((p,q,p-q))
#    new_p = plist[-1] + 3*(len(plist)) + 1
#    plist.append(new_p)
#    if len(plist) > 700:
#        break
#    if len(plist) % 10 == 0:
#        print(len(plist))

def next_p(plist):
    plist.append(plist[-1] + 3*(len(plist))+1)
    
plist = [1]
for i in range(2*10**6):
   next_p(plist)
   
def memoize(f):
    memo = {}
    def helper(x):
        if x not in memo:
            memo[x] = f(x)
        return memo[x]
    return helper

@memoize
def is_pent(n):
    try:
        return ((24*n + 1)**.5)%6 == 5
    except TypeError:
        return is_pent(abs(n))

#def is_pent(n):
#    return n in plist

#difflist = []
#for i in range(len(plist)):
#    next_check = False
#    for j in range(i):
#        if (plist[j] << 1) > plist[i]:
#            next_check = True
#            break
#        if is_pent(plist[i] - plist[j]):
#            difflist.append(plist[i]-plist[j])
#    if next_check:
#        continue
#    if i % 10 == 0:
#        print(i)

i=0
int_list = []
for p in plist:
    for q in plist[:i]:
        if ((is_pent(p-q)) and (is_pent(p+q))):
            int_list.append((p,q,p-q))
            print(int_list)
    if i % 1000 == 0:
        print(i)
    i += 1
    if int_list:
        break