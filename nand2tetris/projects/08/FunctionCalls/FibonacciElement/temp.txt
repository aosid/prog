@256
                            D = A
                            @SP
                            M = D
                            @$INIT
                            0;JMP
                            
                            (COMP)
                            @SP
                            A = M - 1
                            M = -1
                            @13
                            A = M
                            0;JMP
                            
                            ($INIT)
                            @Sys.init
                            0;JMP
                            (Main.fibonacci)

@ARG
                                    D = M
                                    @0
                                    A = D + A
                                    D = M
                                    
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @2
                D = A
                
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @Main.fibonacci$$C14
                    D = A
                    @13
                    M = D
                    @SP
                    AM = M - 1
                    D = M
                    @SP
                    AM = M - 1
                    D = M - D
                    @COMP
                    D;JLT
                    @SP
                    A = M
                    M = 0
                    @SP
                    M = M + 1
                    (Main.fibonacci$$C14)
                    @SP
                           AM = M - 1
                           D = M
                           @Main.fibonacci$IF_TRUE
                           D;JNE
                           @Main.fibonacci$IF_FALSE
                            0;JMP
                            (Main.fibonacci$IF_TRUE)
@ARG
                                    D = M
                                    @0
                                    A = D + A
                                    D = M
                                    
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @LCL
                           D = M
                           @13
                           M = D
                           @5
                           D = D - A
                           @14
                           M = D
                           @SP
                           AM = M - 1
                           D = M
                           @ARG
                           A = M
                           M = D
                           
                           @ARG
                           D = M
                           @SP
                           M = D + 1
                           
                           @13
                           AM = M - 1
                           D = M
                           @THAT
                           M = D
                           
                           @13
                           AM = M - 1
                           D = M
                           @THIS
                           M = D
                           
                           @13
                           AM = M - 1
                           D = M
                           @ARG
                           M = D
                           
                           @13
                           A = M - 1
                           D = M
                           @LCL
                           M = D
                           
                           @14
                           A = M
                           A = M
                           0;JMP
                           (Main.fibonacci$IF_FALSE)
@ARG
                                    D = M
                                    @0
                                    A = D + A
                                    D = M
                                    
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @2
                D = A
                
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @SP
                    AM = M - 1
                    D = M
                    @SP
                    AM = M - 1
                    D = M - D
                    @SP
                    A = M
                    M = D
                    @SP
                    M = M + 1
                    @SP            // pop inner_ARG 0
                           AM = M - 1
                           D = M
                           @ARG
                           A = M
                           M = D
                           
                           @ARG           // SP = inner_ARG + 1
                           D = M
                           @SP
                           M = D + 1
                           
                           @5       // THAT = FRAME - 1
                           AM = M - 1
                           D = M
                           @THAT
                           M = D
                           
                           @5       // THIS = FRAME - 2
                           AM = M - 1
                           D = M
                           @THIS
                           M = D
                           
                           @5       // ARG = FRAME - 3
                           AM = M - 1
                           D = M
                           @ARG
                           M = D
                           
                           @5       // LCL = FRAME - 4
                           A = M - 1
                           D = M
                           @LCL
                           M = D
                           
                           @6         // tmp_RETURNADD
                           A = M
                           A = M
                           0;JMP
                           (Main.fibonacci$IF_FALSE)
@ARG
                                    D = M
                                    @0
                                    A = D + A
                                    D = M
                                    
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @2
                D = A
                
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @SP
                    AM = M - 1
                    D = M
                    @SP
                    AM = M - 1
                    D = M - D
                    @SP
                    A = M
                    M = D
                    @SP
                    M = M + 1
                    @Main.fibonacci$$RET1 // Push return address
                           D = A
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @LCL                 // Push LCL
                           D = M 
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @ARG                 // Push ARG
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @THIS                // Push THIS
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @THAT                // Push THAT
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @1           // Initialize ARG = SP - (5 + numArgs)
                           D = A
                           @5
                           D = D + A
                           @SP
                           D = M - D
                           @ARG
                           M = D
                           
                           @SP                 // Initialize LCL = SP
                           D = M
                           @LCL
                           M = D
                           
                           @Main.fibonacci        // Jump to function
                           0;JMP
                           
                           (Main.fibonacci$$RET1) // mark return address
                           @ARG
                                    D = M
                                    @0
                                    A = D + A
                                    D = M
                                    
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @1
                D = A
                
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @SP
                    AM = M - 1
                    D = M
                    @SP
                    AM = M - 1
                    D = M - D
                    @SP
                    A = M
                    M = D
                    @SP
                    M = M + 1
                    @Main.fibonacci$$RET2 // Push return address
                           D = A
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @LCL                 // Push LCL
                           D = M 
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @ARG                 // Push ARG
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @THIS                // Push THIS
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @THAT                // Push THAT
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @1           // Initialize ARG = SP - (5 + numArgs)
                           D = A
                           @5
                           D = D + A
                           @SP
                           D = M - D
                           @ARG
                           M = D
                           
                           @SP                 // Initialize LCL = SP
                           D = M
                           @LCL
                           M = D
                           
                           @Main.fibonacci        // Jump to function
                           0;JMP
                           
                           (Main.fibonacci$$RET2) // mark return address
                           @SP
                    AM = M - 1
                    D = M
                    @SP
                    AM = M - 1
                    D = D + M
                    @SP
                    A = M
                    M = D
                    @SP
                    M = M + 1
                    @LCL          // tmp_FRAME = LCL
                           D = M
                           @5
                           M = D
                           @5
                           D = D - A     // tmp_RET = LCL - 5
                           @6
                           M = D
                           @SP            // pop inner_ARG 0
                           AM = M - 1
                           D = M
                           @ARG
                           A = M
                           M = D
                           
                           @ARG           // SP = inner_ARG + 1
                           D = M
                           @SP
                           M = D + 1
                           
                           @5       // THAT = FRAME - 1
                           AM = M - 1
                           D = M
                           @THAT
                           M = D
                           
                           @5       // THIS = FRAME - 2
                           AM = M - 1
                           D = M
                           @THIS
                           M = D
                           
                           @5       // ARG = FRAME - 3
                           AM = M - 1
                           D = M
                           @ARG
                           M = D
                           
                           @5       // LCL = FRAME - 4
                           A = M - 1
                           D = M
                           @LCL
                           M = D
                           
                           @6         // tmp_RETURNADD
                           A = M
                           A = M
                           0;JMP
                           (Sys.init)

@4
                D = A
                
                            @SP
                            A = M
                            M = D
                            @SP
                            M = M + 1
                            @Main.fibonacci$$RET3 // Push return address
                           D = A
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @LCL                 // Push LCL
                           D = M 
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @ARG                 // Push ARG
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @THIS                // Push THIS
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @THAT                // Push THAT
                           D = M
                           @SP
                           A = M
                           M = D
                           @SP
                           M = M + 1
                           
                           @1           // Initialize ARG = SP - (5 + numArgs)
                           D = A
                           @5
                           D = D + A
                           @SP
                           D = M - D
                           @ARG
                           M = D
                           
                           @SP                 // Initialize LCL = SP
                           D = M
                           @LCL
                           M = D
                           
                           @Main.fibonacci        // Jump to function
                           0;JMP
                           
                           (Main.fibonacci$$RET3) // mark return address
                           (Sys.init$WHILE)
@Sys.init$WHILE
                            0;JMP
                            